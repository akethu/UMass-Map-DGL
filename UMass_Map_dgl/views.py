from django.shortcuts import render
import requests
import sys
from subprocess import run, PIPE

landmarks = ['none', 'Central Residential Area', 'Orchard Hill Residential Area', 'Northeast Residential Area', 'Newman Center', 'Worcester Dining Hall', 'Franklin Dining Hall', 'French Hall', 'Fernald Hall', 'OHill Observatory', 'Clark Hall', 'Olver, John W. Design Building', 'Integrative Learning Center', 'Studio Arts Building', 'Fine Arts Center', 'Isenberg School of Management Building', 'DuBois Library', 'Bartlett Hall', 'Hicks Physical Education Building', 'Goodell Building', 'Boyden Gymnasium', 'Tobin Hall', 'CHC Residential Area', 'Morrill Science Center', 'UMass Campus Pond', 'Student Union', 'Campus Center', 'Skinner Hall', 'Physical Sciences Building', 'Lederle Graduate Research Center', 'Conte Polymer Research Center', 'Machmer Hall', 'Mullins Memorial Center', 'Kennedy, John Francis Champions Center', 'Physical Plant Building', 'Stockbridge Hall', 'UPlay Fields', 'PVTA Facility Buildings', 'Gunness Laboratory', 'Marston Hall', 'Marcus Hall', 'Herter Hall', 'Recreation Center', 'Dickinson Hall', 'South College', 'McGuirk Alumni Stadium', 'Southwest Residential Area', 'Berkshire Dining Hall', 'Hampshire Dining Hall', 'Lincoln Apartments', 'Kendrick Place', 'US Post Office', 'Amherst Center', 'Amherst Regional High School', 'Integrated Sciences Building', 'Life Science Laboratories', 'Chapel']

distance = [
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56],
    [0, 1, 7.663539942, 3, 4, 5, 5.747654957, 7, 3.831769971, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56],
    [0, 7.663539942, 2, 3, 4, 13.4111949, 9.579424928, 9.579424928, 8, 5.747654957, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 9.579424928, 56],
    [0, 1, 2, 3, 4, 3.831769971, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 3.831769971, 3.831769971, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 3.831769971, 55, 56],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 3.831769971, 14, 3.831769971, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 7.663539942, 7.663539942, 51, 52, 53, 54, 55, 56],
    [0, 1, 13.4111949, 3.831769971, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1.915884986, 3.831769971, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 1, 4.3333, 56],
    [0, 5.747654957, 9.579424928, 3, 4, 5, 6, 1, 1.915884986, 9, 1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56],
    [0, 5.747654957, 9.579424928, 3, 4, 5, 1, 7, 8, 9, 2, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 3.83176997, 24, 25, 26, 5.747654957, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 5.747654957, 56],
    [0, 3.831769971, 2, 3, 4, 5, 1.915884986, 7, 8, 9, 1.915884986, 1.915884986, 12, 1, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56],
    [0, 1, 5.747654957, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56],
    [0, 1, 2, 3, 4, 5, 1, 2, 1.915884986, 9, 10, 2, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 3.831769971, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56],
    [0, 1, 2, 3, 4, 5, 1.915884986, 7, 1.915884986, 9, 2, 11, 12, 1.915884986, 3.831769971, 3.831769971, 16, 17, 18, 19, 20, 21, 22, 1.915884986, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 3.831769971, 1.915884986, 1, 1.5, 2.5, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56],
    [0, 1, 2, 3, 3.25, 5, 6, 7, 1, 9, 10, 1.915884986, 12, 13, 14, 3.5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 3.5, 12, 13, 14, 1.4, 16, 17, 18, 19, 20, 21, 22, 5.747654957, 3, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 1, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 3],
    [0, 1, 2, 3, 3.831769971, 5, 6, 7, 8, 9, 10, 3.831769971, 12, 5.747654957, 1.915884986, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 3.3, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 1.4, 26, 27, 28, 29, 30, 2, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 1.4, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 2],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 1, 20, 1, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 1.5, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 2.4],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1, 18, 19, 5, 1, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 1, 42, 43, 44, 45, 7.8, 9, 9, 49, 50, 51, 52, 53, 54, 55, 56],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1, 18, 19, 20, 21, 2, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 3, 1.5, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 1],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 5, 19, 20, 4, 2, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 2.4, 37, 38, 39, 40, 41, 42, 43, 44, 45, 7, 8, 8, 49, 50, 51, 52, 53, 54, 55, 56],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1, 1, 19, 4, 21, 1, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 3.5, 2, 1, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 3, 34, 35, 2.5, 37, 38, 39, 40, 41, 3, 3, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56],
    [0, 1, 2, 3, 4, 5, 6, 2.49, 8, 9, 2, 2, 2.4, 13, 3, 15, 16, 17, 18, 19, 20, 21, 22, 23, 1.4, 25, 26, 3, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1.915884986, 13, 2, 15, 16, 17, 18, 19, 20, 21, 22, 1.4, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1, 13, 14, 15, 1, 17, 18, 19, 20, 21, 22, 23, 24, 25, 1.49, 27, 28, 29, 30, 1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 1.49, 26, 2, 2.5, 29, 30, 2, 32, 33, 34, 2, 36, 37, 38, 39, 5, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 2, 55, 56],
    [0, 1, 2, 3, 4, 5, 6, 6.5, 8, 9, 10, 11, 1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 2.49, 24, 25, 2, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 1, 1, 56],
    [0, 1, 2, 1.4, 4, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 2.5, 27, 28, 1, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 3, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 2, 55, 56],
    [0, 1, 2, 1.4, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1, 29, 1, 31, 32, 33, 34, 35, 36, 37, 38, 39, 3, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 1, 30, 31, 32, 33, 34, 35, 36, 37, 1, 1, 1, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 17, 18, 19, 20, 21, 22, 23, 24, 1, 2, 27, 28, 29, 30, 31, 32, 33, 7, 3, 36, 37, 38, 39, 40, 41, 42, 43, 2, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 1, 1, 35, 36, 37, 38, 39, 40, 41, 1, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 2, 23, 24, 25, 26, 27, 28, 29, 30, 31, 1, 33, 34, 35, 1, 37, 38, 39, 40, 41, 1, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 8, 1, 33, 34, 6, 36, 5, 38, 39, 40, 41, 1, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 4, 27, 28, 29, 30, 3, 32, 33, 6, 35, 36, 6, 38, 4, 4, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 2.4, 21, 2.5, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 4, 7, 36, 37, 5, 6, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 1, 31, 32, 33, 34, 35, 36, 5, 38, 1, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 1, 31, 32, 33, 34, 4, 36, 6, 1, 39, 1, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 5, 27, 3, 3, 2, 31, 32, 33, 34, 4, 36, 37, 38, 1, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 2, 16, 2, 1.4, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 2],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 3, 23, 24, 25, 26, 27, 28, 29, 30, 31, 1, 1, 3, 35, 36, 37, 38, 39, 40, 41, 42, 2.5, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 3, 20, 21, 2.4, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 2.5, 43, 2.4, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 2, 17, 18, 1, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 1.4, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 2.4, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 2, 44, 45, 10, 9, 9, 49, 50, 51, 52, 53, 54, 55, 56],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 9, 19, 7, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 10, 46, 2, 1, 8, 50, 51, 52, 53, 54, 55, 56],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 10.4, 19, 8, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 9, 2, 47, 1, 9, 50, 51, 52, 53, 54, 55, 56],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 9.4, 19, 7.4, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 9, 1, 1, 48, 8, 50, 51, 52, 53, 54, 55, 56],
    [0, 1, 2, 3, 8, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 8, 9, 8, 49, 12, 51, 52, 53, 54, 55, 56],
    [0, 1, 2, 3, 9, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 12, 50, 5, 52, 14, 54, 55, 56],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 5, 51, 4, 53, 54, 55, 56],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 4, 52, 53, 54, 55, 56],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 14, 51, 52, 53, 54, 55, 56],
    [0, 1, 2, 3, 4, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 2, 1, 2, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 2, 56],
    [0, 1, 12, 3, 4, 3, 6, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 2, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 2, 55, 56],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 3, 15, 2, 2.4, 18, 1, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 2, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56]
]

####################################### DGL Graph | Begin #######################################

from os import PRIO_USER
import torch
import dgl
import random as rand

src = torch.LongTensor([1, 2, 2, 9, 1, 6, 1, 8, 2, 5, 55, 2, 2, 7, 3, 5, 29, 3, 3, 28, 5, 28, 5, 55, 55, 7, 6, 7, 6, 8, 8, 13, 13, 4, 13, 11, 10, 11, 10, 6, 23, 10, 10, 8, 10, 7, 23, 27, 55, 27, 55, 54, 5, 54, 7, 27, 7, 23, 8, 11, 11, 23, 11, 14, 11, 15, 13, 15, 15, 4, 15, 14, 15, 41, 14, 41, 14, 24, 14, 23, 14, 56, 23, 24, 23, 12, 12, 24, 12, 27, 12, 26, 12, 25, 27, 26, 27, 54, 54, 26, 54, 28, 29, 28, 29, 40, 29, 30, 30, 40, 30, 39, 30, 38, 38, 39, 38, 37, 37, 39, 37, 35, 37, 34, 35, 39, 39, 40, 35, 40, 26, 40, 40, 28, 28, 26, 25, 26, 31, 26, 35, 26, 35, 31, 35, 34, 34, 31, 34, 42, 34, 32, 31, 25, 31, 16, 31, 44, 25, 16, 32, 42, 32, 33, 42, 43, 42, 33, 42, 22, 43, 44, 43, 19, 43, 22, 44, 16, 44, 19, 16, 56, 33, 22, 33, 36, 19, 56, 19, 17, 19, 22, 56, 41, 56, 17, 36, 22, 36, 20, 22, 21, 22, 20, 21, 17, 21, 18, 21, 20, 17, 18, 17, 41, 41, 18, 18, 20, 18, 46, 18, 47, 18, 48, 20, 46, 20, 47, 20, 48, 4, 50, 4, 49, 48, 46, 48, 47, 46, 47, 48, 45, 46, 45, 47, 45, 48, 49, 46, 49, 47, 49, 49, 50, 50, 53, 50, 51, 51, 52, 6, 2, 3, 54, 5, 29, 7, 1, 11, 6])

dst = torch.LongTensor([2, 1, 9, 2, 6, 1, 8, 1, 5, 2, 2, 55, 7, 2, 5, 3, 3, 29, 28, 3, 28, 5, 55, 5, 7, 55, 7, 6, 8, 6, 13, 8, 4, 13, 11, 13, 11, 10, 6, 10, 10, 23, 8, 10, 7, 10, 27, 23, 27, 55, 54, 55, 54, 5, 27, 7, 23, 7, 11, 8, 23, 11, 14, 11, 15, 11, 15, 13, 4, 15, 14, 15, 41, 15, 41, 14, 24, 14, 23, 14, 56, 14, 24, 23, 12, 23, 24, 12, 27, 12, 26, 12, 25, 12, 26, 27, 54, 27, 26, 54, 28, 54, 28, 29, 40, 29, 30, 29, 40, 30, 39, 30, 38, 30, 39, 38, 37, 38, 39, 37, 35, 37, 34, 37, 39, 35, 40, 39, 40, 35, 40, 26, 28, 40, 26, 28, 26, 25, 26, 31, 26, 35, 31, 35, 34, 35, 31, 34, 42, 34, 32, 34, 25, 31, 16, 31, 44, 31, 16, 25, 42, 32, 33, 32, 43, 42, 33, 42, 22, 42, 44, 43, 19, 43, 22, 43, 16, 44, 19, 44, 56, 16, 22, 33, 36, 33, 56, 19, 17, 19, 22, 19, 41, 56, 17, 56, 22, 36, 20, 36, 21, 22, 20, 22, 17, 21, 18, 21, 20, 21, 18, 17, 41, 17, 18, 41, 20, 18, 46, 18, 47, 18, 48, 18, 46, 20, 47, 20, 48, 20, 50, 4, 49, 4, 46, 48, 47, 48, 47, 46, 45, 48, 45, 46, 45, 47, 49, 48, 49, 46, 49, 47, 50, 49, 53, 50, 51, 50, 52, 51, 2, 6, 54, 3, 29, 5, 1, 7, 6, 11])

g = dgl.graph((src, dst))

# frontier = dgl.in_subgraph(g, [8])
# first_hop = dgl.in_subgraph(g, frontier.all_edges()[0])

# print(frontier.all_edges(), first_hop.all_edges())
# combined = torch.cat((first_hop.all_edges()[0].unique(), frontier.all_edges()[0], frontier.all_edges()[1].unique()))
# uniques, counts = combined.unique(return_counts=True)
# difference = uniques[counts == 1]


# print('All second hop nodes: ', difference)
# print('All first hop nodes: ', frontier.all_edges()[0])
# print('Src nodes: ', frontier.srcnodes())
# print('Dst nodes: ', frontier.dstnodes())

# To find the k_hop neighbors
def k_hop(graph, srcNode, k):
    difference = [0]
    if (k == 1): return dgl.in_subgraph(graph, srcNode).all_edges()[0]
    for x in range(k - 1):
        fr = dgl.in_subgraph(graph, srcNode)
        srcNode = fr.all_edges()[0]
        f_hop = dgl.in_subgraph(graph, fr.all_edges()[0])
        combined = torch.cat((f_hop.all_edges()[0].unique(), srcNode, fr.all_edges()[1].unique()))
        uniques, counts = combined.unique(return_counts=True)
        difference = uniques[counts == 1]
    return difference if torch.numel(difference) > 0 else []

def path(graph, srcNodes, pathLength):
    uniRandWalk = dgl.sampling.random_walk(graph, srcNodes, length=pathLength)
    paths = uniRandWalk[0]
    for x in range(len(srcNodes)):
        print('Random path starting from ', srcNodes[x], ': ', paths[x])
    return 'Success'

def pathWithFrontier(graph, srcNode, length):
    tenList = srcNode
    for x in range(length):
        tenr = k_hop(graph, srcNode, 1)
        srcNode = tenr[rand.randint(0, torch.numel(tenr) - 1)].tolist()
        tenList.append(srcNode)
    return tenList

####################################### DGL Graph | End #######################################

def convertToLandmark(list):
    result = ''
    num = len(list)
    for x in list:
        result += landmarks[x]
        num = num - 1
        result += '.' if (num == 0) else ', '
    return result
        
def getNumHops(start, finish):
    num = 1
    countKill = 120
    while countKill > 0:
        route = k_hop(g, [start], num)
        route = route if (route == []) else route.tolist()
        if finish in route:
            return num
        num = num + 1
        countKill = countKill - 1
    return -1
        
def buildRoute(start, finish, hops):
    countKill = 20000
    while countKill > 0:
        route = pathWithFrontier(g, [start], hops)
        countKill = countKill - 1
        if finish in route:
            return route

def convertToRoute(start, finish, builder):
    result = ''
    num = len(builder)
    for x in builder:
        result += landmarks[x]
        num = num - 1
        result += '.' if (num == 0) else ' --> '
    return result

def walkingTime(builder):
    timeSpent = 0
    for x in range(len(builder) - 1):
        timeSpent += distance[x][x+1]
    return int(timeSpent)

def button(request):
    return render(request, 'home.html')

def nearby(request):
    inp1 = request.POST.get('option0')
    out = k_hop(g, [int(inp1)], 1).tolist()
    result = convertToLandmark(out, )
    string = 'Places Near ' + landmarks[int(inp1)] + ': '
    return render(request, 'home.html', {'data0': string,'data1': result})

def route(request):
    inp1 = request.POST.get('option1')
    inp2 = request.POST.get('option2')
    hops = getNumHops(int(inp1), int(inp2))
    builder = buildRoute(int(inp1), int(inp2), hops)
    result = convertToRoute(int(inp1), int(inp2), builder)
    walk = 'Approx. walking time: ' + (str(int(walkingTime(builder) * 0.8)) if walkingTime(builder) > 25 else str(walkingTime(builder))) + ' min'
    length = 'Approx. distance: ' + str(round(walkingTime(builder) * 1.6 * 35 * 0.000621371, 2)) + ' miles'
    string = 'Suggested Route From ' + landmarks[int(inp1)] + ' to ' + landmarks[int(inp2)] + ':-'
    return render(request, 'home.html', {'dataa': string, 'data2': result, 'data3': walk, 'data4': length})